-----------THREE TIER ARCHITECTURE------------

create vpc
       name - project-vpc
       CIDR - 10.0.0.0/16

2. create Internet gateway
       name - project-ig           // attach to project-vpc

3. create subnet
 
      public-subnet-1a
      public-subnet-1b
              CIDR - 10.0.1.0/24
                     10.0.2.0/24          // Bastion


      frontend-pvt-subnet-1a
      frontend-pvt-subnet-1b
              CIDR - 10.0.3.0/24
                     10.0.4.0/24          // Frontend


      backend-pvt-subnet-1a
      backend-pvt-subnet-1b
              CIDR - 10.0.5.0/24
                     10.0.6.0/24          // Backend


      RDS-subnet-1a
      RDS-subnet-1b
              CIDR - 10.0.7.0/24
                     10.0.8.0/24          // Database

4. Create Route Table

      name - public-rt
      vpc - project-vpc

             Edit routes -
                   Add route - 0.0.0.0/0
                   target - project-ig

             subnet association-
                   Edit - public-subnet-1a
                          public-subnet-1b

5. create NAT Gateway

       name - project-nat
       subnet - public-subnet-1a
       allocated elastic IP -

6.Create Route Table (NAT Gateway)

      name - private-rt-nat
      vpc - project-vpc

             Edit routes -
                   Add route - 0.0.0.0/0
                   target - project-nat

             subnet association-
                   Edit -  frontend-pvt-subnet-1a
                           frontend-pvt-subnet-1b

                           backend-pvt-subnet-1a
                           backend-pvt-subnet-1b

7.create security group
 
        Public SG -       name - public-sg
                          description - allow
                          vpc - project-vpc

                          Inbound rule - All traffic (0.0.0.0/0)


        Frontend SG -     name - frontend-sg
                          description - allow
                          vpc - project-vpc

                          Inbound rule -  SSH (0.0.0.0/0)
                                          HTTP with ALB sg


        Backend SG -      name - backend-sg
                          description - allow
                          vpc - project-vpc

                          Inbound rule -  SSH  - 22  (0.0.0.0/0)
                                          HTTP - 80  (0.0.0.0/0)
                                          All traffic  (0.0.0.0/0)


      Load balancer SG -  name - ALB-sg
                          description - allow
                          vpc - project-vpc

                          Inbound rule -  HTTP  - 80  (0.0.0.0/0)
                                          HTTPS - 443 (0.0.0.0/0)
                                          All traffic - (0.0.0.0/0)


        Database SG -     name - database-sg
                          description - allow
                          vpc - project-vpc

                          Inbound rule - MySQL Arora - 3306  (0.0.0.0/0)


8. Lunch Instance
 
           Bastion    (public)
           Frontend   (private)
           Backend    (private)           // keypair required connect for private Server



 
9. Go to RDS -
     create subnet group -
          name - rds-sg
          vpc - project-vpc
          AZ - 1a, 1b
          subnet - RDS-subnet-1a
                   RDS-subnet-1b     // then create

     create Database -
            standard create
            mysql
            self managed password - chandan#1234
            vpc - project-vpc
            public access - no
            AZ - 1a, 1b              // then create


--------------------Backend--------------------

10. connect backend server using bastion server
 
        connect bastion
                   sudo su -
                   vi <keypair name>.pem
                   Chmod 400 <keypair name>
    //  goto backend server & connect  then go SSH client copy & paste
                   SSH client (copy code & paste)
 

        connect backend
                   sudo su -
                   yum install git -y
                   git clone https://github.com/CloudTechDevOps/2nd10WeeksofCloudOps-main.git
                   ls
 	           cd 2nd10WeeksofCloudOps-main/
 	           ls
       //  then remove the unnecessary file
       //  go to backend
 	   cd backend/
                   vi .env
    // go to .env file to set the correct configuration
 
 		        DB_HOST=<rds endpoint>
 		        DB_USERNAME=admin
 		        DB_PASSWORD="chandan#1234"
 		        PORT=3306
    // after changes goto   esc --> :wq! --> enter
 
                   yum install mariadb105-server -y

      //  run your test.sql through rds so that database and tables create
 		   MySQL -h <rds-endpoint> -u admin -p<password> <test.sql

     //  install node js
                   sudo dnf install -y nodejs
                   npm install
                   npm install -g pm2
                   pm2 start index.js --name node-app
 
                   curl http://localhost        // hello response form server

// then create Target group & load balancer

11. Create Target Group    // for backend
 
           name - backend-tg
           protocol - HTTP
           port - 80
           vpc - project-vpc
           path - not required
 
               Register Target
                     select - backend server
                     (Click) - Including as pending below     // then save


12. create Load balancer
 
          name - bastion-ALB
          vpc -  project-vpc
          network maping - public-subnet-1a
                           public-subnet-1b
          SG - ALB-sg & backend-sg
          TG - bastion-tg
          AZ - 1a, 1b

 
 
   // now goto target group check healthy

// after creation process we can connect frontend server


----------------Frontend--------------

13. connect Frontend server using bastion server
 
        connect bastion
                   sudo su -
                   vi <keypair name>.pem
                   Chmod 400 <keypair name>
    //  goto Frontend server & connect  then go SSH client copy & paste
                   SSH client (copy code & paste)
 
        connect Frontend
                   sudo su -

    //  install dependencies

                   yum install httpd -y
                   systemctl start httpd
                   systemctl enable httpd
 
   //  install nodejs

                   sudo dnf install -y nodejs

   //   Frontend deploy process
                   yum install git -y
                   git clone https://github.com/CloudTechDevOps/2nd10WeeksofCloudOps-main.git
                   ls
 	           cd 2nd10WeeksofCloudOps-main/
 	           ls

 
   //  edit the config.js

                   vi client/src/pages/config.js
 
                  ( const API_BASE_URL = "http://api.narni.co.in";)
   //   in above line change to your backend loadbalncer url

                   const API_BASE_URL = "http://backend-loadbalancer-url";

   // checkout client

                   cd client



   //  then go to client directory  &  run below commands

****(Use npm run build:
When preparing the app for deployment (e.g., to a server or hosting service like AWS, Netlify, or Vercel).
Use npm start:
During development or to start the app in production (for backend apps).)*****

                   npm install
                   npm run build
                   sudo cp -r build/* /var/www/html

   //  your frontend part is completed

15. After that create frontend tg and loadbalncer and check your loadbalncer is giving project output along with books
    add the books
 


16. Create Target Group       // for frontend
 
           name - frontend-tg
           protocol - HTTP
           port - 80
           vpc - project-vpc
           path - not required
 
               Register Target
                     select - frontend server
                     (Click) - Including as pending below     // then save


17. create Load balancer
 
          name - backend-ALB
          vpc -  project-vpc
          network maping - public-subnet-1a
                           public-subnet-1b
          SG - ALB-sg & backend-sg
          TG - backend-tg
          AZ - 1a, 1b

  // then goto target group check healthy
  //  then copy frontend Load balancer DNS IP and paste in search bar


18. create Route53 
          
          goto route53  -->  select domain name  -->  click 
          
                 chintu.shop  -->  create alias record  -->  select - application load balancer
                                                             select - region (us-east-1) 

                                                             select loadbalancer - frontend LB

  // we can create one more alias record for backend


                                   create alias record  -->  select - application load balancer
                                                             select - region (us-east-1)

                                                             select loadbalancer - backend LB   
   // then create 
 
// after that go to search bar enter your domain name 
